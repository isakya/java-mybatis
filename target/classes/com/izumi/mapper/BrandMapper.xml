<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:名称空间
-->
<mapper namespace="com.izumi.mapper.BrandMapper">
    <!--
        数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据
            * 起别名：对不一样的列名起别名，让别名和实体类的属性名一样
            * 缺点：每次查询都要定义一次别名
            * 解决：用SQL片段
            * 缺点：不灵活
            * 解决：resultMap
    -->
    <!--
        id:唯一标识
        type:映射的类型，支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id:完成主键字段的映射
                column：表的列名
                property：实体类属性名
            result:完成一般字段的映射
        -->
        <result column="brand_name" property="brandName"/>
        <result column="brand_name" property="companyName"/>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--
        sql片段
    -->
    <!--<sql id="brand_column">-->
    <!--    id, brand_name as brandName, company_name as companyName, ordered, description, status-->
    <!--</sql>-->
    <!--<select id="selectAll" resultType="brand">-->
    <!--    select-->
    <!--        <include refid="brand_column" />-->
    <!--    from tb_brand;-->

    <!--</select>-->

    <!--<select id="selectAll" resultType="brand">-->
    <!--    select *-->
    <!--    from tb_brand;-->
    <!--</select>-->


    <!--
        查询详情
    -->
    <!--
        参数占位符：
            1. ${} 会将其替换为 ?，为了防止SQL注入
            2. #{} 拼sql，会存在SQL注入问题
            3. 使用时机：
                参数传递的时候：#{}
                表名或者列名不固定的情况下：${} 会存在SQL注入问题

        参数类型：parameterType 可以省略
        特殊字符处理：
            1. 转译字符
            2. CDATA区:
                select * from tb_brand where id
                <![CDATA[
                    <
                ]]>
                #{id};
    -->
    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>


    <!--
        条件查询
    -->
    <!--
        <select id="selectByCondition" resultMap="brandResultMap">
            select *
            from tb_brand
            where status = #{status}
              and company_name = #{companyName}
              and brand_name = #{brandName};
        </select>
    -->


    <!--
        动态条件查询

        问题：当第一个条件为空时，剩余条件会变成 where and xxx，报错
        解决：1. 恒等式 where 1=1; 2. mybatis提供的<where>标签
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName};
            </if>
        </where>

    </select>

    <!--单条件查询-->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName};
                </when>
                <!--有<where>就不需要了-->
                <!--<otherwise>-->
                <!--    1=1-->
                <!--</otherwise>-->
            </choose>
        </where>
    </select>

    <!--添加-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>

    <!--修改-->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null and ordered != ''">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null and status != ''">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>

</mapper>